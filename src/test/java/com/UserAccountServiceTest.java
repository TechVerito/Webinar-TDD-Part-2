/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com;

import com.dao.UserAccountDAO;
import com.domain.UserAccount;
import com.service.UserAccountService;
import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

/*
User Story 1: User registration

As a user I want to register my account on online shopping cart website so that I can shop online

Acceptance criteria 1
Given username does not already exist in the system
When registration request is sent with details of username, password, first name, last name
Then user should be registered in the system with provided details

Acceptance criteria 2
Given username already exist in the system
When registration request is sent with username, password, first name, last name
Then report error "Username already exists"

User Story 2: Show full name
As a user I want my full name to be displayed on online shopping cart website

Acceptance criteria
Given username already exists in the system
And username is provided in the request
Then return full name of the user for requested username

*/


class UserAccountServiceTest {

    private final UserAccountDAO userAccountDAO = mock(UserAccountDAO.class);

    @Test
    void should_Register_User_In_the_System_If_Username_Does_Not_Exist() {
        //arrange
        doReturn(false).when(userAccountDAO).isAccountExist("lord_snow");
        UserAccountService userAccountService = new UserAccountService(userAccountDAO);

        //act
        userAccountService.registerUser("lord_snow", "password", "Jon", "Snow");

        //assert
        final UserAccount expectedUserAccount = new UserAccount("lord_snow", "password", "Jon", "Snow");
        verify(userAccountDAO).create(expectedUserAccount);
    }

    @Test
    void should_Report_Error_If_Username_Already_Exists() {
        //arrange
        doReturn(true).when(userAccountDAO).isAccountExist("lord_snow");

        //act
        UserAccountService userAccountService = new UserAccountService(userAccountDAO);
        Exception exception = assertThrows(IllegalArgumentException.class, () -> userAccountService.registerUser("lord_snow", "password", "Jon", "Snow"));
        assertThat(exception.getMessage()).isEqualTo("Username already exists");
    }

    @Test
    void should_Return_Full_name_of_provided_user() {
        //arrange
        doReturn(true).when(userAccountDAO).isAccountExist("lord_snow");
        UserAccount jonsUserAccount = new UserAccount("lord_snow", "password", "Jon", "Snow");
        doReturn(jonsUserAccount).when(userAccountDAO).getUserAccount("lord_snow");
        UserAccountService userAccountService = new UserAccountService(userAccountDAO);

        //act
        String fullName = userAccountService.getFullName("lord_snow");

        //assert
        assertThat(fullName).isEqualTo("Jon Snow");
    }

}
